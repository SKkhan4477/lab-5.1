class CircularQueue:
    def __init__(self, capacity):
        self.capacity = capacity
        self.queue = [None] * capacity
        self.front = self.rear = -1

    def is_empty(self):
        return self.front == self.rear == -1

    def is_full(self):
        if (self.rear + 1) % self.capacity == self.front:
            return True
        return False

    def size(self):
        if self.is_empty():
            return 0
        if self.front <= self.rear:
            return self.rear - self.front + 1
        else:
            return (self.capacity - self.front + self.rear + 1)

    def enqueue(self, item):
        if self.is_full():
            print("Queue is full. Cannot enqueue.")
        else:
            if self.is_empty():
                self.front = self.rear = 0
            else:
                self.rear = (self.rear + 1) % self.capacity
            self.queue[self.rear] = item

    def dequeue(self):
        if self.is_empty():
            print("Queue is empty. Cannot dequeue.")
        else:
            item = self.queue[self.front]
            if self.front == self.rear:
                self.front = self.rear = -1
            else:
                self.front = (self.front + 1) % self.capacity
            return item


my_circular_queue = CircularQueue(5)

my_circular_queue.enqueue(1)
my_circular_queue.enqueue(2)
my_circular_queue.enqueue(3)

print("Queue size:", my_circular_queue.size()) 

print("Dequeue:", my_circular_queue.dequeue())   
print("Queue size:", my_circular_queue.size())  

my_circular_queue.enqueue(4)
my_circular_queue.enqueue(5)

print("Is full:", my_circular_queue.is_full())  

my_circular_queue.enqueue(6)  # Output: Queue is full. Cannot enqueue.

print("Dequeue:", my_circular_queue.dequeue())   
print("Dequeue:", my_circular_queue.dequeue())  
print("Dequeue:", my_circular_queue.dequeue())   
print("Dequeue:", my_circular_queue.dequeue())  

print("Is empty:", my_circular_queue.is_empty()) 
